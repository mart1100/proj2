# -*- coding: utf-8 -*-
"""
/***************************************************************************
 wtyczkaDialog
                                 A QGIS plugin
 wtyczka
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by sss
        email                : ads
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import *
#import qgis.utils
from qgis.utils import iface
from qgis.PyQt.QtCore import QVariant


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'wtyczka_dialog_base.ui'))


class wtyczkaDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(wtyczkaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_dh.clicked.connect(self.calculate_dh)
        self.pushButton_pole.clicked.connect(self.calculate_area)
        self.pushButton_zlicz.clicked.connect(self.count_objects)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        self.comboBox_jed.addItem("m2")
        self.comboBox_jed.addItem("ha")
        self.comboBox_jed.addItem("a")
        self.pushButton_wyczysc.clicked.connect(self.clear_results)
        self.plik.fileChanged.connect(self.load_file_to_table)
    
    def calculate_dh(self):
        current_layer = self.combo_box.currentLayer()
        selected_features = current_layer.selectedFeatures()
        h_1 = float(selected_features[0]['wysokosc'])
        h_2 = float(selected_features[1]['wysokosc'])
        P1 = selected_features[0]['nr_punktu']
        P2 = selected_features[1]['nr_punktu']
        d_h = h_2 - h_1
        self.label_wynik_dh.setText(f'{d_h:.3f} m')
        iface.messageBar().pushMessage("Obliczono", f"Różnica przewyższeń między punktami {P1} i {P2} wynosi {d_h:.3f}", level= Qgis.Success, duration=7)


    def podaj_dane_o_zaznaczonym_obiekcie(self):
        active_layer = iface.activeLayer()
        selected_features = active_layer.selectedFeatures()
        for feature in selected_features:
            geom = feature.geometry()
            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            if geom.type() == QgsWkbTypes.PointGeometry:
                if geomSingleType:
                    x = geom.asPoint()
                    self.listaWybranychOb_wsp.append(f'Point: {x}, \r\n')
                else:
                    x = geom.asMultiPoint()
                    self.listaWybranychOb_wsp.append(f'MultiPoint: {x}, \r\n')
    
            elif geom.type() == QgsWkbTypes.LineGeometry:
                if geomSingleType:
                    x = geom.asPolyline()
                    self.listaWybranychOb_wsp.append(f'Line: {x}, \r\n')
                else:
                    x = geom.asMultiPolyline()
                    self.listaWybranychOb_wsp.append(f'Multiline: {x}, \r\n')
    
            elif geom.type() == QgsWkbTypes.PolygonGeometry:
                if geomSingleType:
                    x = geom.asPolygon()
                    self.listaWybranychOb_wsp.append(f'Polygon: {x} \r\n')
                else:
                    x = geom.asMultiPolygon()
                    self.listaWybranychOb_wsp.append(f'MultiPolygon: {x} \r\n')
            else:
                print("Unknown or invalid geometry")
                
                
    def calculate_area(self):
        current_layer = self.combo_box.currentLayer()
        selected_features = current_layer.selectedFeatures()
        n = len(selected_features)
    
        if n < 3:
            iface.messageBar().pushMessage("Błąd", "Zaznacz co najmniej 3 punkty do obliczenia pola.", level=Qgis.Warning, duration=5)
            return

        area = 0.0
        points_used = []
        point_geometry = []
        for i in range(n):
            x1, y1 = selected_features[i].geometry().asPoint().x(), selected_features[i].geometry().asPoint().y()
            x2, y2 = selected_features[(i + 1) % n].geometry().asPoint().x(), selected_features[(i + 1) % n].geometry().asPoint().y()
            area += (x1 + x2) * (y2 - y1)
            points_used.append(selected_features[i]['nr_punktu'])
            point_geometry.append(selected_features[i].geometry().asPoint())

        area /= 2

    # Pobierz wybraną jednostkę
        jednostka = self.comboBox_jed.currentText()

        if jednostka == "m2":
            pass  # Nie ma potrzeby dokonywania przeliczeń
        elif jednostka == "ha":
            area /= 10000  # Przelicz na hektary
        elif jednostka == "a":
            area /= 100  # Przelicz na ary

        self.label_wynik_pole.setText(f'{area:.3f}')
        message = f"Dla punktów: {', '.join(map(str, points_used))} pole wynosi {area:.3f} {jednostka}"
        iface.messageBar().pushMessage("Obliczono", message, level=Qgis.Success, duration=7)

    
    def count_objects(self):
        current_layer = self.combo_box.currentLayer()
        obj_number = len(current_layer.selectedFeatures())
        self.label_wynik_obiekty.setText(str(obj_number))
        
    def clear_results(self):
        self.label_wynik_dh.clear()
        self.label_wynik_pole.clear()
        self.label_wynik_obiekty.clear()
        self.tableWidget_wsp.clearContents()  # Czyści tylko zawartość, nie usuwając wierszy ani kolumn
        self.plik.setFilePath('')  # Czyści zawartość przycisku plik

    def load_file_to_table(self, file_path):
        if not file_path:
            return
        with open(file_path, 'r') as file:
            data = file.readlines()
            row_count = len(data)
            column_count = 2  # Wczytujemy 2 kolumny (x, y)
            self.tableWidget_wsp.setRowCount(row_count)
            self.tableWidget_wsp.setColumnCount(column_count)
            self.tableWidget_wsp.setHorizontalHeaderLabels(["x", "y"])
            for i, line in enumerate(data):
                parts = line.strip().split()
                if len(parts) != 2:
                    continue
                x, y = parts
                self.tableWidget_wsp.setItem(i, 0, QtWidgets.QTableWidgetItem(x))
                self.tableWidget_wsp.setItem(i, 1, QtWidgets.QTableWidgetItem(y))

    